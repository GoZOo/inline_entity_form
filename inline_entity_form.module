<?php

/**
 * @file
 * Provides a widget for inline management (creation, modification, removal) of
 * referenced entities. The primary use case is the parent -> children one
 * (for example, order -> line items), where the child entities are never
 * managed outside the parent form.
 */
use Drupal\Component\Utility\NestedArray;

/**
 * Flag indicating that the entity should be unlinked.
 */
define('IEF_ENTITY_UNLINK', 1);

/**
 * Flag indicating that the entity should be unlinked and deleted.
 */
define('IEF_ENTITY_UNLINK_DELETE', 2);

/**
 * Implements hook_menu().
 */
function inline_entity_form_menu() {
  $items = array();
  $items['inline_entity_form/autocomplete'] = array(
    'title' => 'Inline Entity Form Autocomplete',
    'page callback' => 'inline_entity_form_autocomplete',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Returns output for inline entity form autocompletes.
 *
 * Supports commerce_product_reference and entityreference fields.
 */
function inline_entity_form_autocomplete($entity_type, $field_name, $bundle, $string = '') {
  $field = field_info_field($field_name);
  $instance = field_info_instance($entity_type, $field_name, $bundle);
  $settings = inline_entity_form_settings($field, $instance);
  $controller = inline_entity_form_get_controller($instance);
  // The current entity type is not supported, or the string is empty.
  // strlen() is used instead of empty() since '0' is a valid value.
  if (!$field || !$instance || !$controller || !strlen($string)) {
    return MENU_ACCESS_DENIED;
  }

  $results = array();
  if ($field['type'] == 'commerce_product_reference') {
    $match_operator = strtolower($controller->getSetting('match_operator'));
    $products = commerce_product_match_products($field, $instance, $string, $match_operator, array(), 10, TRUE);

    // Loop through the products and convert them into autocomplete output.
    foreach ($products as $product_id => $data) {
      $results[] = t('@label (!entity_id)', array('@label' => $data['title'], '!entity_id' => $product_id));
    }
  }
  elseif ($field['type'] == 'entityreference') {
    $handler = entityreference_get_selection_handler($field, $instance, $settings['entity_type']);
    $entity_labels = $handler->getReferencableEntities($string, $controller->getSetting('match_operator'), 10);

    foreach ($entity_labels as $bundle => $labels) {
      // Loop through each entity type, and autocomplete with its titles.
      foreach ($labels as $entity_id => $label) {
        // entityreference has already check_plain-ed the title.
        $results[] = t('!label (!entity_id)', array('!label' => $label, '!entity_id' => $entity_id));
      }
    }
  }

  $matches = array();
  foreach ($results as $result) {
    // Strip things like starting/trailing white spaces, line breaks and tags.
    $key = preg_replace('/\s\s+/', ' ', str_replace("\n", '', trim(decode_entities(strip_tags($result)))));
    $matches[$key] = '<div class="reference-autocomplete">' . $result . '</div>';
  }

  drupal_json_output($matches);
}

/**
 * Returns the Inline Entity Form controller for the passed-in reference field.
 *
 * @param $instance
 *   The instance array of the reference field.
 *
 * @return
 *   An instantiated controller object, or FALSE if none found.
 */
function inline_entity_form_get_controller($instance) {
  $field = $instance->getField();
  $instance_settings = $instance->getSettings();
  $field_settings = $field->getSettings();
  return \Drupal::service("plugin.manager.inline_entity_form")->createInstance($field_settings['target_type']);

  /*
  $field = field_info_field($instance['field_name']);
  $type_settings = $instance['widget']['settings']['type_settings'];
  $ief_settings = inline_entity_form_settings($field, $instance);
  $entity_info = entity_get_info($ief_settings['entity_type']);
  // The current entity type is not supported, execution can't continue.
  if (!isset($entity_info['inline entity form'])) {
    return FALSE;
  }

  return new $entity_info['inline entity form']['controller']($ief_settings['entity_type'], $type_settings);
  */
}

/**
 * Implements hook_entity_info_alter().
 */
function inline_entity_form_entity_info_alter(&$entity_info) {
  /**
   * @var \Drupal\Core\Entity\EntityType[] $entity_info
   */
  $entity_info['node']->setFormClass('inline entity form', '\Drupal\inline_entity_form\Plugin\InlineEntityForm\NodeInlineEntityFormController');

  /*
  if (isset($entity_info['taxonomy_term'])) {
    $entity_info['taxonomy_term']['inline entity form'] = array(
      'controller' => 'TaxonomyTermInlineEntityFormController',
    );
  }
  if (isset($entity_info['commerce_product'])) {
    $entity_info['commerce_product']['inline entity form'] = array(
      'controller' => 'CommerceProductInlineEntityFormController',
    );
  }
  if (isset($entity_info['commerce_line_item'])) {
    $entity_info['commerce_line_item']['inline entity form'] = array(
      'controller' => 'CommerceLineItemInlineEntityFormController',
    );
  }
  */
}

/**
 * Implements hook_entity_property_info_alter().
 *
 * @todo Remove once Commerce 1.5 gets released with #1860248 committed.
 */
function inline_entity_form_entity_property_info_alter(&$info) {
  if (!empty($info['commerce_product'])) {
    $properties = &$info['commerce_product']['properties'];
    $properties['status']['options list'] = 'inline_entity_form_product_status_options_list';
  }
}

/**
 * Returns the options list for the product status property.
 *
 * @todo Remove once Commerce 1.5 gets released with #1860248 committed.
 */
function inline_entity_form_product_status_options_list() {
  return array(
    0 => t('Disabled'),
    1 => t('Active'),
  );
}

/**
 * Implements hook_entity_delete().
 *
 * Deletes referenced entities if needed.
 *
 * @todo Remove when there's a stable contrib module for this.
 */
function inline_entity_form_entity_delete($entity, $type) {
  return;

  $entity_info = entity_get_info($type);
  list(,, $bundle) = entity_extract_ids($type, $entity);
  foreach (field_info_instances($type, $bundle) as $field_name => $instance) {
    if (strpos($instance['widget']['type'], 'inline_entity_form') === 0) {
      $controller = inline_entity_form_get_controller($instance);

      // The controller specified that referenced entities should be deleted.
      if ($controller && $controller->getSetting('delete_references')) {
        $items = field_get_items($type, $entity, $field_name);
        if ($items) {
          $field = field_info_field($field_name);
          $ief_settings = inline_entity_form_settings($field, $instance);

          $ids = array();
          foreach ($items as $item) {
            $ids[] = $item[$ief_settings['column']];
          }
          $context = array(
            'parent_entity_type' => $type,
            'parent_entity' => $entity,
          );

          $controller->delete($ids, $context);
        }
      }
    }
  }
}

/**
 * Attaches theme specific CSS files.
 *
 * @param $theme_css
 *  An array of all CSS files that should be considered.
 * @param $css
 *   The $form['#attached']['css'] array, modified by reference.
 */
function _inline_entity_form_attach_css($theme_css, &$css) {
  if (empty($theme_css)) {
    return;
  }

  // Add the base CSS file, if provided.
  if (!empty($theme_css['base'])) {
    $css[] = $theme_css['base'];
  }

  // Add the theme specific CSS file, if provided.
  $theme_key = $GLOBALS['theme'];
  if (!empty($theme_css[$theme_key])) {
    $css[] = $theme_css[$theme_key];
  }
}

/**
 * Implements hook_theme().
 */
function inline_entity_form_theme() {
  return array(
    'inline_entity_form_entity_table' => array(
      'render element' => 'form',
    ),
  );
}

/**
 * Implements hook_field_widget_settings_form().
 */
function inline_entity_form_field_widget_settings_form($field, $instance) {
  $widget = $instance['widget'];
  $settings = $widget['settings'];
  $controller = inline_entity_form_get_controller($instance);
  // The current entity type is not supported, execution can't continue.
  if (!$controller) {
    return array();
  }

  $element = array();
  // The fields are not editable from the UI for now.
  $element['fields'] = array(
    '#type' => 'value',
    '#value' => $settings['fields'],
  );

  // Add entity type specific settings if they exist.
  $settings_form = $controller->settingsForm($field, $instance);
  if (!empty($settings_form)) {
    $entity_info = entity_get_info($controller->entityType());
    $element['type_settings'] = array(
      '#type' => 'fieldset',
      '#title' => t('Inline Entity Form: %type', array('%type' => $entity_info['label'])),
    );
    $element['type_settings'] += $settings_form;
  }

  return $element;
}

/**
 * Implements hook_field_widget_properties_alter().
 *
 * IEF is not suited for usage within VBO's "modify entity values" action.
 * If that context is detected, switch the widget to the default one specified
 * by the field type.
 */
function inline_entity_form_field_widget_properties_alter(&$widget, $context) {
  $view = views_get_current_view();
  $is_ief_widget = (strpos($widget['type'], 'inline_entity_form') === 0);
  $has_vbo = module_exists('views_bulk_operations');
  if ($view && $is_ief_widget && $has_vbo) {
    $vbo = _views_bulk_operations_get_field($view);
    if ($vbo) {
      $field = $context['field'];
      $field_type = field_info_field_types($field['type']);
      $widget_type = field_info_widget_types($field_type['default_widget']);
      $widget_type += array('settings');

      $widget['type'] = $field_type['default_widget'];
      $widget['module'] = $widget_type['module'];
      $widget['settings'] = $widget_type['settings'];
    }
  }
}

/**
 * Implements hook_form_alter().
 *
 * Adds the IEF submit function and the #ief_submit_all flag to the main submit
 * button of a form that contains an IEF widget.
 * Needs to be done in an alter hook because many forms add the submit button
 * after inline_entity_form_field_widget_form() is called.
 */
function inline_entity_form_form_alter(&$form, &$form_state, $form_id) {
  if (!empty($form_state['inline_entity_form'])) {
    $submit = array_merge(array('inline_entity_form_trigger_submit'), $form['#submit']);

    if (!empty($form['submit'])) {
      $form['submit']['#submit'] = array_merge($submit, $form['submit']['#submit']);
      $form['submit']['#ief_submit_all'] = TRUE;
    }

    if (!empty($form['actions']['submit'])) {
      $form['actions']['submit']['#submit'] = array_merge($submit, $form['actions']['submit']['#submit']);
      $form['actions']['submit']['#ief_submit_all'] = TRUE;
    }

    if (!empty($form['actions']['publish'])) {
      $form['actions']['publish']['#submit'] = array_merge($submit, $form['actions']['publish']['#submit']);
      $form['actions']['publish']['#ief_submit_all'] = TRUE;
    }

    if (!empty($form['actions']['unpublish'])) {
      $form['actions']['unpublish']['#submit'] = array_merge($submit, $form['actions']['unpublish']['#submit']);
      $form['actions']['unpublish']['#ief_submit_all'] = TRUE;
    }

  }
}

/**
 * Updates entity weights based on their weights in the widget.
 */
function inline_entity_form_update_row_weights($element, &$form_state, $form) {
  $ief_id = $element['#ief_id'];
  // Loop over the submitted delta values and update the weight of the entities
  // in the form state.
  foreach (element_children($element['entities']) as $key) {
    $form_state['inline_entity_form'][$ief_id]['entities'][$key]['_weight'] = $element['entities'][$key]['delta']['#value'];
  }
}

/**
 * Wraps and returns the entity form provided by the passed-in controller.
 *
 * @param $controller
 *   The inline entity form controller.
 * @param $entity_form
 *   The form array that will receive the entity form.
 * @param $form_state
 *   The form state of the parent form.
 *
 * @return
 *   The form array containing the embedded entity form.
 */
function inline_entity_form_entity_form($controller, $entity_form, &$form_state) {
  $labels = $controller->labels();
  // Build a deta suffix that's appended to button #name keys for uniqueness.
  $delta = $entity_form['#ief_id'];
  if ($entity_form['#op'] == 'edit') {
    $delta .= '-' . $entity_form['#ief_row_delta'];
    $save_label = t('Update @type_singular', array('@type_singular' => $labels['singular']));
  }
  elseif ($entity_form['#op'] == 'add') {
    // Create a new entity that will be passed to the form.
    $form_settings = $form_state['inline_entity_form'][$entity_form['#ief_id']]['form settings'];
    $entity_form['#entity'] = inline_entity_form_create_entity($entity_form['#entity_type'], $form_settings['bundle'], $entity_form['#parent_language']);
    $entity_form['#title'] = t('Add new @type_singular', array('@type_singular' => $labels['singular']));
    $save_label = t('Create @type_singular', array('@type_singular' => $labels['singular']));
  }

  // Retrieve the form provided by the controller.
  $entity_form = $controller->entityForm($entity_form, $form_state);

  // Add the actions
  $entity_form['actions'] = array(
    '#type' => 'container',
    '#weight' => 100,
  );
  $entity_form['actions']['ief_' . $entity_form['#op'] . '_save'] = array(
    '#type' => 'submit',
    '#value' => $save_label,
    '#name' => 'ief-' . $entity_form['#op'] . '-submit-' . $delta,
    '#limit_validation_errors' => array($entity_form['#parents']),
    '#attributes' => array('class' => array('ief-entity-submit')),
    '#ajax' => array(
      'callback' => 'inline_entity_form_get_element',
      'wrapper' => 'inline-entity-form-' . $entity_form['#ief_id'],
    ),
  );
  $entity_form['actions']['ief_' . $entity_form['#op'] . '_cancel'] = array(
    '#type' => 'submit',
    '#value' => t('Cancel'),
    '#name' => 'ief-' . $entity_form['#op'] . '-cancel-' . $delta,
    '#limit_validation_errors' => array(),
    '#ajax' => array(
      'callback' => 'inline_entity_form_get_element',
      'wrapper' => 'inline-entity-form-' . $entity_form['#ief_id'],
    ),
  );

  // Add the appropriate submit handlers and their related data.
  if ($entity_form['#op'] == 'add') {
    $entity_form['actions']['ief_add_save']['#submit'] = array(
      'inline_entity_form_trigger_submit',
      'inline_entity_form_close_child_forms',
      'inline_entity_form_close_form',
    );
    $entity_form['actions']['ief_add_cancel']['#submit'] = array(
      'inline_entity_form_close_child_forms',
      'inline_entity_form_close_form',
      'inline_entity_form_cleanup_form_state',
    );
  }
  else {
    $entity_form['actions']['ief_edit_save']['#ief_row_delta'] = $entity_form['#ief_row_delta'];
    $entity_form['actions']['ief_edit_cancel']['#ief_row_delta'] = $entity_form['#ief_row_delta'];

    $entity_form['actions']['ief_edit_save']['#submit'] = array(
      'inline_entity_form_trigger_submit',
      'inline_entity_form_close_child_forms',
      'inline_entity_form_close_row_form',
    );
    $entity_form['actions']['ief_edit_cancel']['#submit'] = array(
      'inline_entity_form_close_child_forms',
      'inline_entity_form_close_row_form',
      'inline_entity_form_cleanup_row_form_state',
    );
  }

  $entity_form['#element_validate'][] = 'inline_entity_form_entity_form_validate';
  $entity_form['#ief_element_submit'][] = 'inline_entity_form_entity_form_submit';
  // Add the pre_render callback that powers the #fieldset form element key,
  // which moves the element to the specified fieldset without modifying its
  // position in $form_state['values'].
  $entity_form['#pre_render'][] = 'inline_entity_form_pre_render_add_fieldset_markup';

  // Allow other modules to alter the form.
  drupal_alter('inline_entity_form_entity_form', $entity_form, $form_state);

  return $entity_form;
}

/**
 * Validates an entity form.
 *
 * @param $entity_form
 *  The form of the entity being managed inline.
 * @param $form_state
 *   The form state of the parent form.
 */
function inline_entity_form_entity_form_validate(&$entity_form, &$form_state) {
  $ief_id = $entity_form['#ief_id'];
  $instance = $form_state['inline_entity_form'][$ief_id]['instance'];
  // Instantiate the controller and validate the form.
  $controller = inline_entity_form_get_controller($instance);
  $controller->entityFormValidate($entity_form, $form_state);

  // Unset untriggered conditional fields errors
  $errors = form_get_errors($form_state);
  if ($errors && !empty($form_state['conditional_fields_untriggered_dependents'])) {
    foreach ($form_state['conditional_fields_untriggered_dependents'] as $untriggered_dependents ) {
      if (!empty($untriggered_dependents['errors'])) {
        foreach (array_keys($untriggered_dependents['errors']) as $key) {
          unset($errors[$key]);
        }
      }
    }
  }
}

/**
 * Submits an entity form.
 *
 * Note that at this point the entity is not yet saved, since the user might
 * still decide to cancel the parent form.
 *
 * @param $entity_form
 *  The form of the entity being managed inline.
 * @param $form_state
 *   The form state of the parent form.
 */
function inline_entity_form_entity_form_submit($entity_form, &$form_state) {
  $ief_id = $entity_form['#ief_id'];
  $instance = $form_state['inline_entity_form'][$ief_id]['instance'];
  // Instantiate the controller and validate the form.
  $controller = inline_entity_form_get_controller($instance);
  $controller->entityFormSubmit($entity_form, $form_state);
  inline_entity_form_cleanup_entity_form_state($entity_form, $form_state);

  if ($entity_form['#op'] == 'add') {
    // Determine the correct weight of the new element.
    $weight = 0;
    if (!empty($form_state['inline_entity_form'][$ief_id]['entities'])) {
      $weight = max(array_keys($form_state['inline_entity_form'][$ief_id]['entities'])) + 1;
    }
    // Add the entity to form state, mark it for saving, and close the form.
    $form_state['inline_entity_form'][$ief_id]['entities'][] = array(
      'entity' => $entity_form['#entity'],
      '_weight' => $weight,
      'form' => NULL,
      'needs_save' => TRUE,
    );
  }
  else {
    $delta = $entity_form['#ief_row_delta'];
    $form_state['inline_entity_form'][$ief_id]['entities'][$delta]['entity'] = $entity_form['#entity'];
    $form_state['inline_entity_form'][$ief_id]['entities'][$delta]['needs_save'] = TRUE;
  }
}

/**
 * Provides the form for adding existing entities through an autocomplete field.
 *
 * @param $entity_form
 *   The form array that will receive the form.
 * @param $form_state
 *   The form state of the parent form.
 *
 * @return
 *   The form array containing the embedded form.
 */
function inline_entity_form_reference_form($controller, $reference_form, &$form_state) {
  $labels = $controller->labels();
  $ief_id = $reference_form['#ief_id'];
  $instance = $form_state['inline_entity_form'][$ief_id]['instance'];
  $autocomplete_path = 'inline_entity_form/autocomplete/' . $instance['entity_type'];
  $autocomplete_path .= '/' . $instance['field_name'] . '/' . $instance['bundle'];

  $reference_form['#title'] = t('Add existing @type_singular', array('@type_singular' => $labels['singular']));
  $reference_form['entity_id'] = array(
    '#type' => 'textfield',
    '#title' => t('@label', array('@label' => ucwords($labels['singular']))),
    '#autocomplete_path' => $autocomplete_path,
    '#element_validate' => array('_inline_entity_form_autocomplete_validate'),
    '#required' => TRUE,
    '#maxlength' => 255,
  );
  // Add the actions
  $reference_form['actions'] = array(
    '#type' => 'container',
    '#weight' => 100,
  );
  $reference_form['actions']['ief_reference_save'] = array(
    '#type' => 'submit',
    '#value' => t('Add @type_singular', array('@type_singular' => $labels['singular'])),
    '#name' => 'ief-reference-submit-' . $reference_form['#ief_id'],
    '#limit_validation_errors' => array($reference_form['#parents']),
    '#attributes' => array('class' => array('ief-entity-submit')),
    '#ajax' => array(
      'callback' => 'inline_entity_form_get_element',
      'wrapper' => 'inline-entity-form-' . $reference_form['#ief_id'],
    ),
    '#submit' => array(
      'inline_entity_form_trigger_submit',
      'inline_entity_form_close_form',
    ),
  );
  $reference_form['actions']['ief_reference_cancel'] = array(
    '#type' => 'submit',
    '#value' => t('Cancel'),
    '#name' => 'ief-reference-cancel-' . $reference_form['#ief_id'],
    '#limit_validation_errors' => array(),
    '#ajax' => array(
      'callback' => 'inline_entity_form_get_element',
      'wrapper' => 'inline-entity-form-' . $reference_form['#ief_id'],
    ),
    '#submit' => array('inline_entity_form_close_form'),
  );

  $reference_form['#element_validate'][] = 'inline_entity_form_reference_form_validate';
  $reference_form['#ief_element_submit'][] = 'inline_entity_form_reference_form_submit';

  // Allow other modules to alter the form.
  drupal_alter('inline_entity_form_reference_form', $reference_form, $form_state);

  return $reference_form;
}

/**
 * #element_validate callback for the IEF autocomplete field.
 */
function _inline_entity_form_autocomplete_validate($element, &$form_state, $form) {
  $value = '';
  if (!empty($element['#value'])) {
    // Take "label (entity id)', match the id from parenthesis.
    if (preg_match("/.+\((\d+)\)/", $element['#value'], $matches)) {
      $value = $matches[1];
    }
  }

  form_set_value($element, $value, $form_state);
}

/**
 * Validates the form for adding existing entities.
 *
 * @param $reference_form
 *  The reference entity form.
 * @param $form_state
 *   The form state of the parent form.
 */
function inline_entity_form_reference_form_validate(&$reference_form, &$form_state) {
  $ief_id = $reference_form['#ief_id'];
  $entity_type = $reference_form['#entity_type'];
  $parents_path = implode('][', $reference_form['#parents']);

  // Instantiate controller to access labels
  $instance = $form_state['inline_entity_form'][$ief_id]['instance'];
  $controller = inline_entity_form_get_controller($instance);
  $labels = $controller->labels();

  $form_values = NestedArray::getValue($form_state['values'], $reference_form['#parents']);
  $attach_entity = entity_load($entity_type, $form_values['entity_id']);

  // Check to see if entity is already referenced by current IEF widget
  if (!empty($attach_entity)) {
    foreach ($form_state['inline_entity_form'][$ief_id]['entities'] as $key => $value) {
      if ($value['entity'] == $attach_entity) {
        form_set_error($parents_path . '][existing_entity', t('The selected @label has already been added.', array('@label' => $labels['singular'])));
        unset($attach_entity);
      }
    }
  }
  else {
    form_set_error($parents_path . '][existing_entity', t('The selected @label is not valid.', array('@label' => $labels['singular'])));
  }
}

/**
 * Submits the form for adding existing entities.
 *
 * Adds the specified entity to the IEF form state.
 *
 * @param $reference_form
 *  The reference entity form.
 * @param $form_state
 *   The form state of the parent form.
 */
function inline_entity_form_reference_form_submit($reference_form, &$form_state) {
  $ief_id = $reference_form['#ief_id'];
  $entity_type = $reference_form['#entity_type'];

  $form_values = NestedArray::getValue($form_state['values'], $reference_form['#parents']);
  $attach_entity = entity_load($entity_type, $form_values['entity_id']);

  // Determine the correct weight of the new element.
  $weight = 0;
  if (!empty($form_state['inline_entity_form'][$ief_id]['entities'])) {
    $weight = max(array_keys($form_state['inline_entity_form'][$ief_id]['entities'])) + 1;
  }

  $form_state['inline_entity_form'][$ief_id]['entities'][] = array(
    'entity' => $attach_entity,
    '_weight' => $weight,
    'form' => NULL,
    'needs_save' => FALSE,
  );
}

/**
 * Wraps and returns the remove form provided by the passed-in controller.
 *
 * @param $controller
 *   The inline entity form controller.
 * @param $remove_form
 *   The form array that will receive the entity form.
 * @param $form_state
 *   The form state of the parent form.
 *
 * @return
 *   The form array containing the embedded remove form.
 */
function inline_entity_form_remove_form($controller, $remove_form, &$form_state) {
  // Build a deta suffix that's appended to button #name keys for uniqueness.
  $delta = $remove_form['#ief_id'] . '-' . $remove_form['#ief_row_delta'];

  // Retrieve the form provided by the controller.
  $remove_form = $controller->removeForm($remove_form, $form_state);
  // Add the actions
  $remove_form['actions'] = array(
    '#type' => 'container',
    '#weight' => 100,
  );
  $remove_form['actions']['ief_remove_confirm'] = array(
    '#type' => 'submit',
    '#value' => t('Remove'),
    '#name' => 'ief-remove-confirm-' . $delta,
    '#limit_validation_errors' => array($remove_form['#parents']),
    '#ajax' => array(
      'callback' => 'inline_entity_form_get_element',
      'wrapper' => 'inline-entity-form-' . $remove_form['#ief_id'],
    ),
    '#submit' => array('inline_entity_form_remove_confirm'),
    '#ief_row_delta' => $remove_form['#ief_row_delta'],
  );
  $remove_form['actions']['ief_remove_cancel'] = array(
    '#type' => 'submit',
    '#value' => t('Cancel'),
    '#name' => 'ief-remove-cancel-' . $delta,
    '#limit_validation_errors' => array(),
    '#ajax' => array(
      'callback' => 'inline_entity_form_get_element',
      'wrapper' => 'inline-entity-form-' . $remove_form['#ief_id'],
    ),
    '#submit' => array('inline_entity_form_close_row_form'),
    '#ief_row_delta' => $remove_form['#ief_row_delta'],
  );

  return $remove_form;
}

/**
 * Remove form submit callback.
 *
 * The row is identified by #ief_row_delta stored on the triggering
 * element.
 * This isn't an #element_validate callback to avoid processing the
 * remove form when the main form is submitted.
 *
 * @param $form
 *   The complete parent form.
 * @param $form_state
 *   The form state of the parent form.
 */
function inline_entity_form_remove_confirm($form, &$form_state) {
  $form_state['rebuild'] = TRUE;
  $element = inline_entity_form_get_element($form, $form_state);
  $ief_id = $element['#ief_id'];
  $instance = $form_state['inline_entity_form'][$ief_id]['instance'];
  $delta = $form_state['triggering_element']['#ief_row_delta'];
  $remove_form = $element['entities'][$delta]['form'];

  // Instantiate the controller and submit the form.
  $controller = inline_entity_form_get_controller($instance);
  $status = $controller->removeFormSubmit($remove_form, $form_state);
  if ($status == IEF_ENTITY_UNLINK_DELETE) {
    $entity_id = $remove_form['#entity']->id();
    $form_state['inline_entity_form'][$ief_id]['delete'][] = $entity_id;
    unset($form_state['inline_entity_form'][$ief_id]['entities'][$delta]);
  }
  elseif ($status == IEF_ENTITY_UNLINK) {
    unset($form_state['inline_entity_form'][$ief_id]['entities'][$delta]);
  }
}

/**
 * Button #submit callback: Triggers submission of entity forms.
 *
 * @param $form
 *   The complete parent form.
 * @param $form_state
 *   The form state of the parent form.
 */
function inline_entity_form_trigger_submit($form, &$form_state) {
  if (!empty($form_state['triggering_element']['#ief_submit_all'])) {
    // The parent form was submitted, process all IEFs and their children.
    inline_entity_form_submit($form, $form_state);
  }
  else {
    // A specific entity form was submitted, process it and all of its children.
    $array_parents = $form_state['triggering_element']['#array_parents'];
    $array_parents = array_slice($array_parents, 0, -2);
    $element = NestedArray::getValue($form, $array_parents);
    inline_entity_form_submit($element, $form_state);
  }
}

/**
 * Submits entity forms by calling their #ief_element_submit callbacks.
 *
 * #ief_element_submit is the submit version of #element_validate.
 *
 * @param $elements
 *   An array of form elements containing entity forms.
 * @param $form_state
 *   The form state of the parent form.
 */
function inline_entity_form_submit($elements, &$form_state) {
  // Recurse through all children.
  foreach (element_children($elements) as $key) {
    if (!empty($elements[$key])) {
      inline_entity_form_submit($elements[$key], $form_state);
    }
  }

  // If there are callbacks on this level, run them.
  if (!empty($elements['#ief_element_submit'])) {
    foreach ($elements['#ief_element_submit'] as $function) {
      $function($elements, $form_state);
    }
  }
}

/**
 * Button #submit callback: Opens a form in the IEF widget.
 *
 * The form is shown below the entity table, at the bottom of the widget.
 *
 * @param $form
 *   The complete parent form.
 * @param $form_state
 *   The form state of the parent form.
 */
function inline_entity_form_open_form($form, &$form_state) {
  $element = inline_entity_form_get_element($form, $form_state);
  $ief_id = $element['#ief_id'];

  $form_state['rebuild'] = TRUE;
  // Get the current form values.
  $parents = array_merge($element['#field_parents'], array($element['#field_name']));
  $form_values = NestedArray::getValue($form_state['input'], $parents);

  $form_state['inline_entity_form'][$ief_id]['form'] = $form_state['triggering_element']['#ief_form'];
  if (!empty($form_values['actions']['bundle'])) {
    $form_state['inline_entity_form'][$ief_id]['form settings'] = array(
      'bundle' => $form_values['actions']['bundle'],
    );
  }
}

/**
 * Button #submit callback: Closes a form in the IEF widget.
 *
 * @param $form
 *   The complete parent form.
 * @param $form_state
 *   The form state of the parent form.
 *
 * @see inline_entity_form_open_form().
 */
function inline_entity_form_close_form($form, &$form_state) {
  $element = inline_entity_form_get_element($form, $form_state);
  $ief_id = $element['#ief_id'];

  $form_state['rebuild'] = TRUE;
  $form_state['inline_entity_form'][$ief_id]['form'] = NULL;
}

/**
 * Button #submit callback: Cleans up form state for a closed entity form.
 *
 * @param $form
 *   The complete parent form.
 * @param $form_state
 *   The form state of the parent form.
 */
function inline_entity_form_cleanup_form_state($form, &$form_state) {
  $element = inline_entity_form_get_element($form, $form_state);
  inline_entity_form_cleanup_entity_form_state($element['form'], $form_state);
}

/**
 * Button #submit callback: Opens a row form in the IEF widget.
 *
 * The row is identified by #ief_row_delta stored on the triggering
 * element.
 *
 * @param $form
 *   The complete parent form.
 * @param $form_state
 *   The form state of the parent form.
 */
function inline_entity_form_open_row_form($form, &$form_state) {
  $element = inline_entity_form_get_element($form, $form_state);
  $ief_id = $element['#ief_id'];
  $delta = $form_state['triggering_element']['#ief_row_delta'];

  $form_state['rebuild'] = TRUE;
  $form_state['inline_entity_form'][$ief_id]['entities'][$delta]['form'] = $form_state['triggering_element']['#ief_row_form'];
}

/**
 * Button #submit callback: Closes a row form in the IEF widget.
 *
 * @param $form
 *   The complete parent form.
 * @param $form_state
 *   The form state of the parent form.
 *
 * @see inline_entity_form_open_row_form().
 */
function inline_entity_form_close_row_form($form, &$form_state) {
  $element = inline_entity_form_get_element($form, $form_state);
  $ief_id = $element['#ief_id'];
  $delta = $form_state['triggering_element']['#ief_row_delta'];

  $form_state['rebuild'] = TRUE;
  $form_state['inline_entity_form'][$ief_id]['entities'][$delta]['form'] = NULL;
}

/**
 * Button #submit callback:  Closes all open child forms in the IEF widget.
 *
 * Used to ensure that forms in nested IEF widgets are properly closed
 * when a parent IEF's form gets submitted or cancelled.
 */
function inline_entity_form_close_child_forms($form, &$form_state) {
  $element = inline_entity_form_get_element($form, $form_state);
  inline_entity_form_close_all_forms($element, $form_state);
}

/**
 * Closes all open IEF forms.
 *
 * Recurses and closes open forms in nested IEF widgets as well.
 *
 * @param $elements
 *   An array of form elements containing entity forms.
 * @param $form_state
 *   The form state of the parent form.
 */
function inline_entity_form_close_all_forms($elements, &$form_state) {
  // Recurse through all children.
  foreach (element_children($elements) as $key) {
    if (!empty($elements[$key])) {
      inline_entity_form_close_all_forms($elements[$key], $form_state);
    }
  }

  if (!empty($elements['#ief_id'])) {
    $ief_id = $elements['#ief_id'];
    // Close the main form.
    $form_state['inline_entity_form'][$ief_id]['form'] = NULL;
    // Close the row forms.
    foreach ($form_state['inline_entity_form'][$ief_id]['entities'] as &$value) {
      $value['form'] = NULL;
    }
  }
}

/**
 * Button #submit callback: Cleans up form state for a closed entity row form.
 *
 * @param $form
 *   The complete parent form.
 * @param $form_state
 *   The form state of the parent form.
 */
function inline_entity_form_cleanup_row_form_state($form, &$form_state) {
  $element = inline_entity_form_get_element($form, $form_state);
  $delta = $form_state['triggering_element']['#ief_row_delta'];
  $entity_form = $element['entities'][$delta]['form'];
  inline_entity_form_cleanup_entity_form_state($entity_form, $form_state);
}

/**
 * IEF widget #element_validate callback: Required field validation.
 */
function inline_entity_form_required_field($element, &$form_state, $form) {
  $ief_id = $element['#ief_id'];
  $has_children = !empty($form_state['inline_entity_form'][$ief_id]['entities']);
  $form_open = !empty($form_state['inline_entity_form'][$ief_id]['form']);
  // If the add new / add existing form is open, its validation / submission
  // will do the job instead (either by preventing the parent form submission
  // or by adding a new referenced entity).
  if (!$has_children && !$form_open) {
    $instance = $form_state['inline_entity_form'][$ief_id]['instance'];
    form_error($element, t('!name field is required.', array('!name' => $instance['label'])));
  }
}

/**
 * Cleans up the form state for a submitted entity form.
 *
 * After field_attach_submit() has run and the form has been closed, the form
 * state still contains field data in $form_state['field']. Unless that
 * data is removed, the next form with the same #parents (reopened add form,
 * for example) will contain data (i.e. uploaded files) from the previous form.
 *
 * @param $entity_form
 *   The entity form.
 * @param $form_state
 *   The form state of the parent form.
 */
function inline_entity_form_cleanup_entity_form_state($entity_form, &$form_state) {
  $info = entity_get_info($entity_form['#entity_type']);
  if (!$info->isFieldable()) {
    // The entity type is not fieldable, nothing to cleanup.
    return;
  }

  $bundle = $entity_form['#entity']->bundle();
  $instances = field_info_instances($entity_form['#entity_type'], $bundle);
  foreach ($instances as $instance) {
    $field_name = $instance->getName();
    $parents = $entity_form[$field_name]['#parents'];
    array_pop($parents);
    $field_state = array();
    field_form_set_state($parents, $field_name, $form_state, $field_state);
  }
}

/**
 * Returns an IEF widget nearest to the triggering element.
 */
function inline_entity_form_get_element($form, $form_state) {
  $element = array();
  $array_parents = $form_state['triggering_element']['#array_parents'];
  // Remove the action and the actions container.
  $array_parents = array_slice($array_parents, 0, -2);

  while (!isset($element['#ief_root'])) {
    $element = NestedArray::getValue($form, $array_parents);
    array_pop($array_parents);
  }

  return $element;
}

/**
 * Creates a new entity of the given type and bundle.
 *
 * @param $entity_type
 *   Entity type.
 * @param $bundle
 *   Bundle.
 * @param $language
 *   (Optional) The language to set, if the entity has a language key.
 */
function inline_entity_form_create_entity($entity_type, $bundle, $language = NULL) {
  $entity_info = entity_get_info($entity_type);
  $bundle_key = $entity_info->getKey('bundle');
  $default_values = array();
  // If the bundle key exists, it must always be set on an entity.
  if (!empty($bundle_key)) {
    $default_values[$bundle_key] = $bundle;
  }

  /*
  // Set the language if we have both a language key and a language value.
  if (isset($language) && !empty($entity_info['entity keys']['language'])) {
    $language_key = $entity_info['entity keys']['language'];
    $default_values[$language_key] = $language;
  }
  */

  return entity_create($entity_type, $default_values);
}

/**
 * Themes the table showing existing entity references in the widget.
 *
 * @param $variables
 *   Contains the form element data from $element['entities'].
 */
function theme_inline_entity_form_entity_table($variables) {
  $form = $variables['form'];
  $entity_type = $form['#entity_type'];
  $fields = $form['#table_fields'];
  // Sort the fields by weight.
  uasort($fields, 'drupal_sort_weight');
  // If one of the rows is in form context, disable tabledrag.
  $has_tabledrag = TRUE;
  foreach (element_children($form) as $key) {
    if (!empty($form[$key]['form'])) {
      $has_tabledrag = FALSE;
    }
  }

  $header = array();
  if ($has_tabledrag) {
    $header[] = array('data' => '', 'class' => array('ief-tabledrag-header'));
    $header[] = array('data' => t('Sort order'), 'class' => array('ief-sort-order-header'));
  }
  // Add header columns for each field.
  $first = TRUE;
  foreach ($fields as $field_name => $field) {
    $column = array('data' => $field['label']);
    // The first column gets a special class.
    if ($first) {
      $column['class'] = array('ief-first-column-header');
      $first = FALSE;
    }
    $header[] = $column;
  }
  $header[] = t('Operations');

  // Build an array of entity rows for the table.
  $rows = array();
  foreach (element_children($form) as $key) {
    $entity = $form[$key]['#entity'];
    // Many field formatters (such as the ones for files and images) need
    // certain data that might be missing on unsaved entities because the field
    // load hooks haven't run yet. Because of that, those hooks are invoked
    // explicitly. This is the same trick used by node_preview().
    if ($form[$key]['#needs_save']) {
//      _field_invoke_multiple('load', $entity_type, array($entity_id => $entity));
    }

    $row_classes = array('ief-row-entity');
    $cells = array();
    if ($has_tabledrag) {
      $cells[] = array('data' => '', 'class' => array('ief-tabledrag-handle'));
      $cells[] = drupal_render($form[$key]['delta']);
      $row_classes[] = 'draggable';
    }
    // Add a special class to rows that have a form underneath, to allow
    // for additional styling.
    if (!empty($form[$key]['form'])) {
      $row_classes[] = 'ief-row-entity-form';
    }

    // Add fields that represent the entity.
    foreach ($fields as $field_name => $field) {
      $data = $entity->get($field_name)->getString();
      $cells[] = array('data' => $data, 'class' => array('inline-entity-form-' . $entity_type . '-' . $field_name));
    }

    // Add the buttons belonging to the "Operations" column.
    $cells[] = drupal_render($form[$key]['actions']);
    // Create the row.
    $rows[] = array('data' => $cells, 'class' => $row_classes);

    // If the current entity array specifies a form, output it in the next row.
    if (!empty($form[$key]['form'])) {
      $row = array(
        array('data' => drupal_render($form[$key]['form']), 'colspan' => count($fields) + 1),
      );
      $rows[] = array('data' => $row, 'class' => array('ief-row-form'), 'no_striping' => TRUE);
    }
  }

  $tabledrag = array();

  if (!empty($rows)) {
    $id = 'ief-entity-table-' . $form['#id'];
    if ($has_tabledrag) {
      // Add the tabledrag JavaScript.
      $tabledrag = array(
        array(
          'action' => 'order',
          'relationship' => 'sibling',
          'group' => 'ief-entity-delta',
        )
      );
    }

    // Return the themed table.
    $table_attributes = array(
      'id' => $id,
      'class' => array('ief-entity-table'),
    );

    $table = array(
      '#type' => 'table',
      '#header' => $header,
      '#rows' => $rows,
      '#attributes' => $table_attributes,
      '#tabledrag' => $tabledrag,
    );

    return drupal_render($table);
  }
}

/**
 * Implements hook_field_widget_error().
 */
function inline_entity_form_field_widget_error($element, $error) {
  form_error($element, $error['message']);
}

/**
 * Move form elements into fieldsets for presentation purposes.
 *
 * Inline forms use #tree = TRUE to keep their values in a hierarchy for
 * easier storage. Moving the form elements into fieldsets during form building
 * would break up that hierarchy, so it's not an option for Field API fields.
 * Therefore, we wait until the pre_render stage, where any changes we make
 * affect presentation only and aren't reflected in $form_state['values'].
 */
function inline_entity_form_pre_render_add_fieldset_markup($form) {
  $sort = array();
  foreach (element_children($form) as $key) {
    $element = $form[$key];
    // In our form builder functions, we added an arbitrary #fieldset property
    // to any element that belongs in a fieldset. If this form element has that
    // property, move it into its fieldset.
    if (isset($element['#fieldset']) && isset($form[$element['#fieldset']])) {
      $form[$element['#fieldset']][$key] = $element;
      // Remove the original element this duplicates.
      unset($form[$key]);
      // Mark the fieldset for sorting.
      if (!in_array($key, $sort)) {
        $sort[] = $element['#fieldset'];
      }
    }
  }

  // Sort all fieldsets, so that element #weight stays respected.
  foreach ($sort as $key) {
    uasort($form[$key], 'element_sort');
  }

  return $form;
}

function inline_entity_form_element_info_alter(&$types) {
  $types['managed_file']['#process'][] = 'inline_entity_form_file_field_widget_process';
}

function inline_entity_form_file_field_widget_process($element, &$form_state, $form) {
  foreach (array('upload_button', 'remove_button') as $key) {
//    $element[$key]['#submit'][] = 'inline_entity_form_file_field_widget_submit';
  }

  return $element;
}

function inline_entity_form_file_field_widget_submit(&$form, &$form_state) {
    // During the form rebuild, file_field_widget_form() will create field item
  // widget elements using re-indexed deltas, so clear out $form_state['input']
  // to avoid a mismatch between old and new deltas. The rebuilt elements will
  // have #default_value set appropriately for the current state of the field,
  // so nothing is lost in doing this.
  // $parents = array_slice($form_state['triggering_element']['#parents'], 0, -2);
  // NestedArray::setValue($form_state['input'], $parents, NULL);

  $button = $form_state['triggering_element'];

  // Go one level up in the form, to the widgets container.
  $element = NestedArray::getValue($form, array_slice($button['#array_parents'], 0, -1));
  $field_name = $element['#field_name'];
  $parents = $element['#field_parents'];

  // Fetch submitted values
  $ief = inline_entity_form_get_element($form, $form_state);
  $submitted_values = NestedArray::getValue($form_state['values'], array_slice($button['#parents'], 0, -2));

  $delta = array_slice($parents, -2, 1);
  $delta = reset($delta);

  // Create new form element
  if (!is_numeric($delta)) {
    $form_state['inline_entity_form'][$ief['#ief_id']]['entities'][] = array();
    end($form_state['inline_entity_form'][$ief['#ief_id']]['entities']);
    $delta = key($form_state['inline_entity_form'][$ief['#ief_id']]['entities']);
  }

  // Reference for the current field item.
  $ief_item = &$form_state['inline_entity_form'][$ief['#ief_id']]['entities'][$delta];

  $fids = array();
  foreach ($submitted_values as $value) {
    $fids[] = reset($value['fids']);
  }

  if (!isset($ief_item['entity'])) {
    $ief_item['entity'] = $element['#entity'];
  }
  $ief_item['entity']->set($field_name, $fids);
  $ief_item['entity']->inline_entity_form_file_field_widget_submit = TRUE;
  $ief_item['needs_save'] = TRUE;
  $ief_item['_weight'] = (string) $delta;

  $form_state['inline_entity_form'][$ief['#ief_id']]['new_entity'] = $ief_item;
}
